
////////////////////////////////////////////////////////
// NEAT HELPER FUNCTIONS
////////////////////////////////////////////////////////

//////////////
// Add a unit if not included
//////////////

@function add-unit($num, $unit:'px'){
  @return if(unitless($num),$num+$unit,$num) ;
};


//////////////
// Usecase
// pass children columns list of parent instead of whole grid
//////////////

@function neat-cols($val){
  @return (
    columns:$val
  );
}

//////////////
// Helper function for creating min / max media query for grid-media()
//////////////

@function neat-media($sizes...){

  // if only
  $size:nth($sizes, 1) ;
  // if size has no px unit add
  $val:" and (max-width:#{add-unit($size)})" ;

  @if length($sizes) >= 2 {
    $val:" and (min-width:#{add-unit(nth($sizes, 1))})" ;
    $val:$val+" and (max-width:#{add-unit(nth($sizes, 2))})" ;
  }

  @return (
    media:"only screen#{$val}"
  );

};

////////////////////////////////////////////////////////
//
// SEPARATE MEDIA QUERY FROM GRID METHOD
//
// make grid lists reusable by injecting media query propery
// ex:  @debug map-merge($neat-grid, neat-media(7, 80));
//
////////////////////////////////////////////////////////

////////////////////////////////////////////////////////
//
// OUTPUT calc()
// neat-calc($grid, $col-numbrs) or
// neat-calc($col-numbrs)  // use default $neat-grid
//
////////////////////////////////////////////////////////

@function neat-calc($params...){
  $grid:if(length($params)>1, nth($params,1), $neat-grid);
  $cols:if(length($params)>1, nth($params,2),nth($params,1));
  @return calc(#{_neat-column-width($grid, $cols)});
}


////////////////////////////////////////////////////////
//
// BULK APPLY new grid to content instead of passing to each
//
////////////////////////////////////////////////////////


@mixin apply-grid($grid) {
    $_default-neat-grid: $neat-grid;
    $neat-grid: map-merge($neat-grid, $grid) !global;
    @content;
    $neat-grid: $_default-neat-grid !global;
}
